load("//third_party:com_github_google_kythe/tools/build_rules/lexyacc.bzl", "genlex", "genyacc")
load("//third_party:com_github_robotlocomotion_drake/tools/workspace/cpplint.bzl", "cpplint")
load(
    "//tools:dreal.bzl",
    "PYTHON_PACKAGE_DIR",
    "dreal_cc_library",
    "dreal_generate_file",
    "dreal_pybind_library",
)
load("@bazel_tools//tools/build_defs/pkg:pkg.bzl", "pkg_tar")

package(default_visibility = ["//visibility:private"])

genyacc(
    name = "parser",
    srcs = ["parser.yy"],
    outs = [
        "parser.yy.cc",
        "parser.yy.hh",
        # Do not sort the above two.
        "location.hh",
        "position.hh",
        "stack.hh",
    ],
)

genlex(
    name = "scanner",
    srcs = [
        "scanner.ll",
        ":parser",
    ],
    out = "scanner.ll.cc",
)

dreal_cc_library(
    name = "sort",
    srcs = [
        "sort.cc",
    ],
    hdrs = [
        "sort.h",
    ],
    visibility = ["//dreal/solver:__pkg__"],
    deps = [
        "//dreal/symbolic",
        "//dreal/util:exception",
    ],
)

dreal_cc_library(
    name = "term",
    srcs = [
        "term.cc",
    ],
    hdrs = [
        "term.h",
    ],
    deps = [
        "//dreal/symbolic",
        "//dreal/util:exception",
    ],
)

dreal_cc_library(
    name = "logic",
    srcs = [
        "logic.cc",
    ],
    hdrs = [
        "logic.h",
    ],
    visibility = ["//dreal/solver:__pkg__"],
    deps = [
        "//dreal/util:exception",
    ],
)

dreal_cc_library(
    name = "command",
    srcs = [
        "command.cc",
        "command_cell.cc",
        "command_cell.h",
    ],
    hdrs = [
        "command.h",
    ],
    deps = [
        ":logic",
        "//dreal/symbolic",
    ],
)

dreal_cc_library(
    name = "smt2",
    srcs = [
        "driver.cc",
        "run.cc",
        ":parser",
        ":scanner",
    ],
    hdrs = [
        "driver.h",
        "run.h",
        "scanner.h",
    ],
    visibility = [
        "//dreal:__pkg__",
        "//dreal/solver:__pkg__",
    ],
    deps = [
        ":logic",
        ":sort",
        ":term",
        "//dreal/solver",
        "//dreal/symbolic",
        "//dreal/util:math",
        "//dreal/util:scoped_unordered_map",
        "//dreal/util:string_to_interval",
    ],
)

# ----------------------
# Bindings
# ----------------------
dreal_generate_file(
    name = "init_py",
    out = "__init__.py",
    content = """from dreal.smt2._dreal_smt2_py import *""",
)

dreal_pybind_library(
    name = "dreal_smt2_py",
    cc_srcs = ["smt2_py.cc"],
    py_srcs = ["__init__.py"],
)

py_test(
    name = "smt2_test_py",
    srcs = [
        "test/smt2_test.py",
    ],
    main = "test/smt2_test.py",
    srcs_version = "PY2AND3",
    tags = [
        "no_asan",
        "no_lsan",
        "no_tsan",
        "no_ubsan",
    ],
    deps = [
        ":dreal_smt2_py",
    ],
)

pkg_tar(
    name = "package_python",
    srcs = [
        ":_dreal_smt2_py.so",
        ":dreal_smt2_py",
    ],
    extension = "tar.gz",
    package_dir = PYTHON_PACKAGE_DIR + "/dreal/smt2",
    tags = ["manual"],
    visibility = ["//:__pkg__"],
)

# ----------------------
# Header files to expose
# ----------------------

filegroup(
    name = "headers",
    srcs = [
        "logic.h",
    ],
    visibility = [
        "//visibility:public",
    ],
)

pkg_tar(
    name = "package_headers",
    srcs = [
        ":headers",
    ],
    extension = "tar.gz",
    package_dir = "include/dreal/smt2",
    tags = ["manual"],
    visibility = ["//:__pkg__"],
)

cpplint()

licenses(["notice"])  # Apache 2.0

exports_files(["LICENSE"])
